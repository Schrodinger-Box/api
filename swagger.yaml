openapi: 3.0.3
info:
    title: Schrodinger's Box
    version: 1.0.0
servers:
-   description: Public server
    url: 'https://schrodinger-box.pit.ovh/api'
-   description: Localhost testing server
    url: 'http://127.0.0.1:8080/api'
security:
-   TokenID: []
    TokenSecret: []
paths:
    /uptime:
        get:
            summary: uptime of the service
            operationId: uptime
            tags:
            -   miscellaneous
            security: []
            responses:
                '200':
                    description: uptime generated
                    content:
                        'application/vnd.api+json':
                            schema:
                                type: object
                                required:
                                -   meta
                                properties:
                                    meta:
                                        type: object
                                        required:
                                        -   uptime
                                        properties:
                                            uptime:
                                                type: string
                            examples:
                                uptime:
                                    value:
                                        meta:
                                            uptime: "3.07571916s"
    /token:
        post:
            summary: create a token with a redirection URL to authenticate user
            operationId: token.create
            tags:
            -   authentication
            security: []
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema:
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/Token'
                        examples:
                            token:
                                $ref: '#/components/examples/TokenEmpty'
            responses:
                '201':
                    description: token created, redirect user to login
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/Token'
                            examples:
                                token:
                                    $ref: '#/components/examples/TokenAuth'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error500:
                                    $ref: '#/components/examples/Error500'
        get:
            summary: retrieve a token
            operationId: token.get
            tags:
            -   authentication
            security: []
            responses:
                '200':
                    description: token found and returned
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/Token'
                            examples:
                                token:
                                    $ref: '#/components/examples/TokenAllAttributes'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /user:
        post:
            summary: create a new user linked to the NUSID provided by the token
            operationId: user.create
            tags:
            -   user
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/User'
                        examples:
                            user:
                                $ref: '#/components/examples/UserNew'
            responses:
                '201':
                    description: user object is created with an assigned id
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/User'
                            examples:
                                user:
                                    $ref: '#/components/examples/UserAllAttributes'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error400:
                                    $ref: '#/components/examples/Error400'
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error500:
                                    $ref: '#/components/examples/Error500'
        patch:
            summary: update an user object with reference ID provided in request body
            operationId: user.update
            tags:
            -   user
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/User'
                        examples:
                            # nusid cannot be updated - hence full update is not applicable here
                            user:
                                $ref: '#/components/examples/UserUpdate'
            responses:
                '200':
                    description: user object is updated successfully
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/User'
                                    included:
                                        type: array
                                        items:
                                            anyOf:
                                            -   $ref: '#/components/schemas/EventSignup'
                                            -   $ref: '#/components/schemas/Event'
                                            -   $ref: '#/components/schemas/User'
                            examples:
                                user:
                                    $ref: '#/components/examples/UserAllAttributes'
                                userWithSignups:
                                    $ref: '#/components/examples/UserWithSignups'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error400:
                                    $ref: '#/components/examples/Error400'
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
        get:
            summary: retrieve information of the token bearer
            operationId: user.get_self
            tags:
            -   user
            responses:
                '200':
                    description: user object is successfully found
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/User'
                                    included:
                                        type: array
                                        items:
                                            anyOf:
                                            -   $ref: '#/components/schemas/EventSignup'
                                            -   $ref: '#/components/schemas/Event'
                                            -   $ref: '#/components/schemas/User'
                            examples:
                                # user.get_self will always obtain all information about the token bearer
                                user:
                                    $ref: '#/components/examples/UserAllAttributes'
                                userWithSignups:
                                    $ref: '#/components/examples/UserWithSignups'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
        delete:
            summary: terminate a user's own account
            operationId: user.delete
            tags:
            -   user
            responses:
                '204':
                    description: user is successfully deleted
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /user/{id}:
        get:
            summary: retrieve information of a specific user
            operationId: user.get
            tags:
            -   user
            parameters:
            -   $ref: '#/components/parameters/PathID'
            responses:
                '200':
                    description: user object is successfully found
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/User'
                                    included:
                                        type: array
                                        items:
                                            anyOf:
                                            -   $ref: '#/components/schemas/EventSignup'
                                            -   $ref: '#/components/schemas/Event'
                                            -   $ref: '#/components/schemas/User'
                            examples:
                                user:
                                    $ref: '#/components/examples/UserAllAttributes'
                                userPartialAttributes:
                                    $ref: '#/components/examples/UserPartialAttributes'
                                userWithSignups:
                                    $ref: '#/components/examples/UserWithSignups'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /event:
        post:
            summary: create a new event
            operationId: event.create
            tags:
            -   event
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/Event'
                        examples:
                            # organizer field should not be included
                            event:
                                $ref: '#/components/examples/EventNew'
            responses:
                '201':
                    description: event is successfully created
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                -   included
                                properties:
                                    data:
                                        $ref: '#/components/schemas/Event'
                                    included:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/User'
                            examples:
                                event:
                                    $ref: '#/components/examples/EventAllAttributes'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error400:
                                    $ref: '#/components/examples/Error400'
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /event/{id}:
        get:
            summary: retrieve information of a specific event
            operationId: event.get
            tags:
            -   event
            parameters:
            -   $ref: '#/components/parameters/PathID'
            responses:
                '200':
                    description: event object is successfully found
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/Event'
                                    included:
                                        type: array
                                        items:
                                            anyOf:
                                            -   $ref: '#/components/schemas/User'
                                            # event may have related signup records
                                            -   $ref: '#/components/schemas/EventSignup'
                            examples:
                                event:
                                    $ref: '#/components/examples/EventAllAttributes'
                                eventWithSignups:
                                    $ref: '#/components/examples/EventWithSignups'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
        delete:
            summary: delete an event
            operationId: event.delete
            tags:
            -   event
            parameters:
            -   $ref: '#/components/parameters/PathID'
            responses:
                '204':
                    description: event is successfully deleted
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /event_signup:
        post:
            summary: create a new signup record
            operationId: event.signup.create
            tags:
            -   event
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/EventSignup'
                        examples:
                            # organizer field should not be included
                            event:
                                $ref: '#/components/examples/EventSignupNew'
            responses:
                '201':
                    description: signup record is successfully created
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                -   included
                                properties:
                                    data:
                                        $ref: '#/components/schemas/EventSignup'
                                    included:
                                        type: array
                                        items:
                                            anyOf:
                                            -   $ref: '#/components/schemas/User'
                                            -   $ref: '#/components/schemas/Event'
                            examples:
                                event_signup:
                                    $ref: '#/components/examples/EventSignupAllAttributes'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
        patch:
            summary: update a new signup record (marking attendance or review events)
            operationId: event.signup.update-
            tags:
            -   event
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/EventSignup'
                        examples:
                            participant:
                                $ref: '#/components/examples/EventSignupUpdateParticipant'
                            organizer:
                                $ref: '#/components/examples/EventSignupUpdateOrganizer'
            responses:
                '200':
                    description: signup record is successfully updated
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                -   included
                                properties:
                                    data:
                                        $ref: '#/components/schemas/EventSignup'
                                    included:
                                        type: array
                                        items:
                                            anyOf:
                                            -   $ref: '#/components/schemas/User'
                                            -   $ref: '#/components/schemas/Event'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'  
    /event_signup/{id}:
        delete:
            summary: delete a signup record
            operationId: event.signup.delete
            tags:
            -   event
            parameters:
            -   $ref: '#/components/parameters/PathID'
            responses:
                '204':
                    description: signup record is successfully deleted
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /events:
        get:
            summary: obtain a list of events
            operationId: events.get
            tags:
            -   event
            parameters:
            -
                name: sort
                description: Order of results presented, accepts properties of an event object (e.g. id). Prefix properties with - means order in decending way (e.g. -id)
                in: query
                schema:
                    type: string
            -
                name: filter
                description: Restriction to filter results from the database, in the format 'organizer_id,1' or 'type,<>,sports' or 'time_begin,<,2020-07-03'
                in: query
                schema:
                    type: array
                    items:
                        type: string
                        pattern: ^[^,]+,[^,]+(?:,[^,]+)?$
            -
                name: page
                description: Index of the page requested, starting from 0 as the first page
                in: query
                schema:
                    type: integer
            responses:
                '200':
                    description: Successfully obtained a list of events
                    content:
                        'application/vnd.api+json':
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Event'
                                    included:
                                        type: array
                                        items:
                                            anyOf:
                                            -   $ref: '#/components/schemas/User'
                                            -   $ref: '#/components/schemas/EventSignup'
                                    links:
                                        type: object
                                        properties:
                                            first:
                                                description: URL to the first page of events in the given order and page size
                                                type: string
                                            last:
                                                description: URL to the last page of events in the given order and page size
                                                type: string
                                            next:
                                                description: URL to the next page of events in the given order and page size, return null if already at last page
                                                type: string
                                            prev:
                                                description: URL to the first page of events in the given order and page size, return null if already at first page
                                                type: string
                                    meta:
                                        type: object
                                        properties:
                                            total_pages:
                                                description: The total number of pages available for query
                                                type: integer
                                            current_page:
                                                description: Value is the same as the page parameter
                                                type: integer
                                            max_page_size:
                                                description: The MAXIMUM number of resource objects in one response which is managed at server-side
                                                type: integer
                                            this_page_size:
                                                description: The number of resource objects in the data array in this response, can be different from max_page_size if it is the last page
                                                type: integer
                                            
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /file:
        post:
            summary: create a new file record
            operationId: file.create
            tags:
            -   file
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/File'
                        examples:
                            # organizer field should not be included
                            event:
                                $ref: '#/components/examples/FileNew'
            responses:
                '201':
                    description: file record is successfully created
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                -   included
                                properties:
                                    data:
                                        $ref: '#/components/schemas/File'
                            examples:
                                file:
                                    $ref: '#/components/examples/FileNewResponse'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error500:
                                    $ref: '#/components/examples/Error500'
        patch:
            summary: update a file object and set its status to active
            operationId: file.update
            tags:
            -   file
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            required:
                            -   data
                            properties:
                                data:
                                    $ref: '#/components/schemas/File'
                        examples:
                            file:
                                $ref: '#/components/examples/FileUpdate'
            responses:
                '200':
                    description: file object is updated successfully
                    content:
                        'application/vnd.api+json':
                            schema: 
                                type: object
                                required:
                                -   data
                                properties:
                                    data:
                                        $ref: '#/components/schemas/File'
                            examples:
                                file:
                                    $ref: '#/components/examples/FileUpdateResponse'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error400:
                                    $ref: '#/components/examples/Error400'
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /file/{id}:
        delete:
            summary: delete a file record
            operationId: file.delete
            tags:
            -   file
            parameters:
            -   $ref: '#/components/parameters/PathID'
            responses:
                '204':
                    description: file record is successfully deleted
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /files:
        get:
            summary: obtain Shared Access Signature (SAS) for downloading resources
            operationId: files.get
            tags:
            -   file
            parameters:
            -   name: type
                in: query
                description: Type of the resources requested, default is 'images'
                required: false
                schema:
                    type: string
            responses:
                '200':
                    description: SAS is generated successfully
                    content:
                        'application/vnd.api+json':
                            schema:
                                type: object
                                properties:
                                    meta:
                                        $ref: '#/components/x-definitions/AzureBlobMeta'
                            examples:
                                files:
                                    $ref: '#/components/examples/FilesGet'
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
    /sms_bind/{number}:
        post:
            summary: bind a handphone number to a user to receive SMS notifications
            operationId: user.sms.bind
            tags:
            -   sms_bind
            parameters:
            -   $ref: '#/components/parameters/PathNumber'
            requestBody:
                required: true
                content:
                    'application/vnd.api+json':
                        schema: 
                            type: object
                            properties:
                                meta:
                                    type: object
                                    properties:
                                        verification_code:
                                            description: if not present, a new code will be generated; if not, will try to check and bind this number to the user account if code is correct
                        examples:
                            new:
                                $ref: '#/components/examples/SMSBindNewCode'
                            verify:
                                $ref: '#/components/examples/SMSBindVerifyCode'
            responses:
                '204':
                    description: A new code is generated, or the number is successfully bound
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error500:
                                    $ref: '#/components/examples/Error500'
        delete:
            summary: unbind the handphone number from the user's account
            operationId: user.sms.unbind
            tags:
            -   sms_bind
            parameters:
            -   $ref: '#/components/parameters/PathNumber'
            responses:
                '204':
                    description: The number is successfully unbound from the user account
                default:
                    description: unexpected error occured
                    content:
                        'application/vnd.api+json':
                            schema:
                                $ref: '#/components/x-definitions/Errors'
                            examples:
                                error401:
                                    $ref: '#/components/examples/Error401'
                                error403:
                                    $ref: '#/components/examples/Error403'
                                error404:
                                    $ref: '#/components/examples/Error404'
                                error500:
                                    $ref: '#/components/examples/Error500'
components:
    schemas:
        Token:
            type: object
            required:
                - type
            properties:
                type:
                    description: type of Token object, which is just `token`
                    type: string
                    enum:
                    -   token
                id:
                    $ref: '#/components/x-definitions/ID'
                attributes:
                    allOf:
                    -
                        type: object
                        required:
                        -   secret
                        -   status
                        properties:
                            secret:
                                $ref: '#/components/x-definitions/Secret'
                            status:
                                description: status of the token
                                type: string
                                enum:
                                -   created
                                -   active
                                -   expired
                                -   destroyed
                    -
                        $ref: '#/components/x-definitions/IdentityFields'
                    -
                        $ref: '#/components/x-definitions/TimeFields'
                        
                links:
                    type: object
                    properties:
                        auth:
                            description: URL for users to prove their claimed identities
                            type: string
        User:
            type: object
            required:
            -   type
            properties:
                type:
                    description: type of User object, which is just `user`
                    type: string
                    enum:
                    -   user
                id:
                    $ref: '#/components/x-definitions/ID'
                attributes:
                    allOf:
                    -
                        type: object
                        required:
                        -   nickname
                        -   type
                        properties:
                            nickname:
                                description: a nickname defined by the user when it is first created
                                type: string
                            type:    
                                description: type of this user object
                                type: string
                                enum:
                                -   individual    # Individual student
                                -   org_student   # CCAs, interest groups
                                -   org_official  # offices, libraries, faculties, NUSSUs
                            email_md5:
                                description: md5 hash of user's email address, used for Gravatar and other services
                                type: string
                                pattern: ^[a-f0-9]{32}$
                    -
                        $ref: '#/components/x-definitions/IdentityFields'
                    -
                        $ref: '#/components/x-definitions/TimeFields'
                relationships:
                    $ref: '#/components/x-definitions/EventSignupsRelationship'
                links:
                    $ref: '#/components/x-definitions/SelfLink'
        Event:
            type: object
            required:
            -   type
            properties:
                type:
                    description: type of Event object, which is just `event`
                    type: string
                    enum:
                    -   event
                id:
                    $ref: '#/components/x-definitions/ID'
                attributes:
                    allOf:
                    -
                        type: object
                        required:
                        -   title
                        -   time_begin
                        -   time_end
                        -   location
                        -   type
                        properties:
                            title:
                                description: title of the event which will be showned at places like search results
                                type: string
                            time_begin:
                                $ref: '#/components/x-definitions/DateTime'
                            time_end:
                                $ref: '#/components/x-definitions/DateTime'
                            location:
                                oneOf:
                                -   $ref: '#/components/x-definitions/OnlineLocation'
                                -   $ref: '#/components/x-definitions/PhysicalLocation'
                            type:
                                description: type of this event
                                type: string
                    -
                        $ref: '#/components/x-definitions/TimeFields'
                relationships:
                    allOf:
                    -   $ref: '#/components/x-definitions/OrganizerRelationship'
                    -   $ref: '#/components/x-definitions/EventSignupsRelationship'
                    -   $ref: '#/components/x-definitions/ImagesRelationship'
                links:
                    $ref: '#/components/x-definitions/SelfLink'
        EventSignup:
            description: a signup relation between a user and an event
            type: object
            required:
            -   type
            properties:
                type:
                    description: type of EventSignup object, which is just `event_signup`
                    type: string
                    enum:
                    -   event_signup
                id:
                    $ref: '#/components/x-definitions/ID'
                attributes:
                    allOf:
                    -   $ref: '#/components/x-definitions/TimeFields'
                    -
                        type: object
                        properties:
                            status:
                                description: status of this signup record
                                type: string
                                enum:
                                -   created
                                -   attended
                                -   reviewed
                                -   withdrawn
                            review_score:
                                description: score of the event rated by the participant
                                type: integer
                            review_text:
                                description: text comment left by the participant
                                type: string
                relationships:
                    allOf:
                    -   $ref: '#/components/x-definitions/EventRelationship'
                    -   $ref: '#/components/x-definitions/UserRelationship'
        File:
            description: a file uploading record
            type: object
            required:
            -   type
            properties:
                type:
                    description: type of File object, which is just `file`
                    type: string
                    enum:
                    -   file
                id:
                    $ref: '#/components/x-definitions/ID'
                attributes:
                    allOf:
                    -   $ref: '#/components/x-definitions/TimeFields'
                    -
                        type: object
                        properties:
                            filename:
                                description: filename of the file (storing at Azure Blob)
                                type: string
                            status:
                                type: string
                                enum:
                                -   created
                                -   active
                                -   destroyed
                            type:
                                type: string
                                enum:
                                -   images
                relationships:
                    $ref: '#/components/x-definitions/UploaderRelationship'
                meta:
                    $ref: '#/components/x-definitions/AzureBlobMeta'
    # definitions of data types
    x-definitions:
        Errors:
            description: a collection of error information returned to client
            type: object
            required:
            -   errors
            properties:
                errors:
                    type: array
                    items:
                        type: object
                        required:
                        -   status
                        -   code
                        -   title
                        properties:
                            status:
                                # error code should only be 4XX or 5XX for an error object
                                description: the HTTP status code applicable to this problem in string
                                type: string
                                pattern: ^[4,5]\d\d$
                            code:
                                description: an application-specific error code
                                type: string
                            title:
                                description: a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem
                                type: string
                            detail:
                                description: a human-readable explanation specific to this occurrence of the problem
        NUSID:
            description: a linked NUSNET id
            type: string
            pattern: ^e\d{7}$
        ID:
            description: primary key of resource objects, unique within the scope of a certain resource
            # take special note that although it is stored as integer in DB, it is a string in JSON request/response
            type: string
            format: ^\d+$
        DateTime:
            description: a specfic time at a specific date, defined by RFC3339 (ISO8601) date-time
            type: string
            format: date-time
        OnlineLocation:
            description: an object representing an online location
            type: object
            required:
            -   type
            -   platform
            -   link
            properties:
                type:
                    description: type of this location object, which is just `online`
                    type: string
                    enum:
                    -   online
                platform:
                    description: the platform for online event to be held
                    type: string
                link:
                    description: the URL or any information like room number linked to the platform and the room, if any
                    type: string
        PhysicalLocation:
            description: a physical location located in Singapore
            required:
            -   type
            -   zip_code
            -   address
            properties:
                type:
                    description: type of this location object, which is just `physical`
                    type: string
                    enum:
                    -   physical
                zip_code:
                    description: a Singapore 6-digit postal code represented in a string
                    type: string
                    pattern: ^[0-8]\d{5}$
                address:
                    description: an address with block number
                    type: string
                building:
                    description: name of the building at this address
                    type: string
                unit:
                    description: a unit number with two parts separated by a hyphen
                    type: string
                    format: ^[A-Z0-9]\d*-\d+[A-Z]*$
        Secret:
            description: a string in UUID pattern, used for authentication and authorization
            type: string
            pattern: ^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$
        Email:
            description: a string in email format
            type: string
            format: email
        IdentityFields:
            description: fields containing identity information, shared by Token and User
            type: object
            properties:
                nusid:
                    $ref: '#/components/x-definitions/NUSID'
                email:
                    $ref: '#/components/x-definitions/Email'
                fullname:
                    description: full name obtained through OpenID protocol
                    type: string
        TimeFields:
            description: fields containing time of the resource being created and updated
            type: object
            properties:
                created_at:
                    $ref: '#/components/x-definitions/DateTime'
                updated_at:
                    $ref: '#/components/x-definitions/DateTime'
        SelfLink:
            description: a link pointing to the resource itself
            type: object
            required:
            -   self
            properties:
                self:
                    type: string
        RelatedLink:
            description: a link pointing to the related resource
            type: object
            required:
            -   related
            properties:
                related:
                    type: string
        AzureBlobMeta:
            description: meta information of the Azure Blob SAS
            type: object
            required:
            -   endpoint
            -   qp
            -   qp_expires_at
            properties:
                endpoint:
                    description: Azure blob service API endpoint for uploading/downloading resources
                    type: string
                qp:
                    description: Query parameter with authorization signature
                    type: string
                qp_expires_at:
                    description: Expiry time of the query parameter (and signature)
                    type: string
        # relationship base definition and extended definitions (with type field fixed)
        RelationshipData:
            type: object
            required:
            -   type
            -   id
            properties:
                type:
                    description: type of this relationship
                    type: string
                id:
                    description: unique ID of the related resource as a string
                    type: string
        Relationship:
            description: a one-to-one relationship object, containing information of related resource
            type: object
            required:
            -   data
            properties:
                data:
                    $ref: '#/components/x-definitions/RelationshipData'
                links:
                    $ref: '#/components/x-definitions/RelatedLink'
        Relationships:
            description: a one-to-many relationship object
            type: object
            required:
            -   data
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/x-definitions/RelationshipData'
        OrganizerRelationship:
            type: object
            # set to 'required' since all usages of this relationship marks it necessary to be present
            required:
            -   organizer
            properties:
                organizer:
                    allOf:
                    -   
                        $ref: '#/components/x-definitions/Relationship'
                    -
                        type: object
                        properties:
                            data:
                                type: object
                                properties:
                                    type:
                                        enum:
                                        -   user
        UploaderRelationship:
            type: object
            # set to 'required' since all usages of this relationship marks it necessary to be present
            required:
            -   uploader
            properties:
                uploader:
                    allOf:
                    -   
                        $ref: '#/components/x-definitions/Relationship'
                    -
                        type: object
                        properties:
                            data:
                                type: object
                                properties:
                                    type:
                                        enum:
                                        -   user
        EventRelationship:
            type: object
            properties:
                event:
                    allOf:
                    -   
                        $ref: '#/components/x-definitions/Relationship'
                    -
                        type: object
                        properties:
                            data:
                                type: object
                                properties:
                                    type:
                                        enum:
                                        -   event
        UserRelationship:
            type: object
            properties:
                user:
                    allOf:
                    -   
                        $ref: '#/components/x-definitions/Relationship'
                    -
                        type: object
                        properties:
                            data:
                                type: object
                                properties:
                                    type:
                                        enum:
                                        -   user
        EventSignupsRelationship:
            type: object
            properties:
                event_signups:
                    allOf:
                    -   
                        $ref: '#/components/x-definitions/Relationships'
                    -
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        type:
                                            enum:
                                            -   event_signup
        ImagesRelationship:
            type: object
            properties:
                images:
                    allOf:
                    -   
                        $ref: '#/components/x-definitions/Relationships'
                    -
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        type:
                                            enum:
                                            -   file
    parameters:
        PathID:
            name: id
            in: path
            description: ID of the resource object to be used
            required: true
            schema:
                $ref: '#/components/x-definitions/ID'
        PathNumber:
            name: number
            in: path
            description: the number to be bound to the user account, starting with country code (+65)
            required: true
            schema:
                type: string
    examples:
        LocationOnline1:
            summary: example for an online location with URL
            value:
                type: online
                platform: Telegram
                link: https://t.me/joinchat/AAAAAE9B8u_something
        LocationOnline2:
            summary: example for an online location with custom information like room number
            value:
                type: online
                platform: EVE Online
                link: 'Channel: ABCXYZ'
        LocationPhysical1:
            summary: a physical location example with building name and without unit number
            value:
                type: physical
                zip_code: '117561'
                address: 2 Sports Drive 1
                building: University Sports Centre
        LocationPhysical2:
            summary: a HDB flat address example
            value:
                type: physical
                zip_code: '117561'
                address: 329 Clementi Ave 2
                unit: 10-13
        TokenEmpty:
            summary: empty token object
            value:
                data:
                    type: token
        TokenAuth:
            summary: a new token with redirection URL to authenticate the user
            value:
                data:
                    type: token
                    id: '1'
                    attributes:
                        secret: 65f60824-9e88-11ea-bb37-0242ac130002
                        status: created
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        auth: 'https://openid.nus.edu.sg/server/?openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.mode=checkid_setup&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&openid.realm=http%3A%2F%2Flocalhost%3A8080%2F&openid.return_to=http%3A%2F%2Flocalhost%3A8080%2Fcallback%2Fopenid&openid.sreg.optional=&openid.sreg.required=email%2Cfullname'
        TokenAllAttributes:
            summary: an active token with all information
            value:
                data:
                    type: token
                    id: '1'
                    attributes:
                        nusid: e1234567
                        email: e1234567@u.nus.edu
                        fullname: Alicia Koh
                        secret: 65f60824-9e88-11ea-bb37-0242ac130002
                        status: created
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
        UserAllAttributes:
            summary: user object with all attributes
            value:
                data:
                    type: user
                    id: '1'
                    attributes:
                        nickname: Ailie
                        nusid: e1234567
                        email: e1234567@u.nus.edu
                        email_md5: dbcb7f47db3e119a6a2ee8090e328bf4
                        fullname: Alicia Koh
                        type: individual
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/user/1'
        UserWithSignups:
            summary: user object with an event signup record
            value:
                data:
                    type: user
                    id: '1'
                    attributes:
                        nickname: Ailie
                        nusid: e1234567
                        email: e1234567@u.nus.edu
                        email_md5: dbcb7f47db3e119a6a2ee8090e328bf4
                        fullname: Alicia Koh
                        type: individual
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        event_signups:
                        -
                            data:
                                type: event_signup
                                id: 1
                    links:
                        self: 'http://127.0.0.1:8080/api/user/1'
                included:
                -
                    type: event_signup
                    id: '1'
                    attributes:
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        # for user object, event signup record only side-loads events information
                        user:
                            data:
                                type: event
                                id: '1'
                -
                    type: event
                    id: '1'
                    attributes:
                        title: Interfaculty Badminton Competition
                        time_begin: '2020-06-30T06:00:00Z'
                        time_end: '2020-06-30T10:00:00Z'
                        location:
                            type: physical
                            zip_code: '117561'
                            address: 2 Sports Drive 1
                            building: University Sports Centre
                        type: sports
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        organizer:
                            data:
                                type: user
                                id: '2'
                            links:
                                related: 'http://127.0.0.1:8080/api/user/1'
                    links:
                        self: 'http://127.0.0.1:8080/api/event/1'
                -
                    # event organizer's data will also be side-loaded for convenience
                    # content of this should be the exactly same content as user.get(id)
                    type: user
                    id: '2'
                    attributes:
                        nickname: Demo Organizer
                        type: individual
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/user/2'
        UserPartialAttributes:
            summary: user object with partial attributes hidden due to privacy settings
            value:
                data:
                    type: user
                    id: '1'
                    attributes:
                        nickname: Allie
                        type: individual
                        email_md5: dbcb7f47db3e119a6a2ee8090e328bf4
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/user/1'
        UserUpdate:
            summary: user object sent to update server's record
            value:
                data:
                    type: user
                    id: '1'
                    attributes:
                        # currently we only allow nickname to be updated
                        nickname: Allie
                
        UserNew:
            summary: new user object with only nickname and type
            value:
                data:
                    type: user
                    attributes:
                        nickname: Ailie
                        type: individual
        EventAllAttributes:
            summary: event object with all attributes
            value:
                data:
                    type: event
                    id: '1'
                    attributes:
                        title: Interfaculty Badminton Competition
                        time_begin: '2020-06-30T06:00:00Z'
                        time_end: '2020-06-30T10:00:00Z'
                        location:
                            type: physical
                            zip_code: '117561'
                            address: 2 Sports Drive 1
                            building: University Sports Centre
                        type: sports
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        organizer:
                            data:
                                type: user
                                id: '1'
                            links:
                                related: 'http://127.0.0.1:8080/api/user/1'
                    links:
                        self: 'http://127.0.0.1:8080/api/event/1'
                included:
                -
                    # content of this should be the exactly same content as user.get(id)
                    type: user
                    id: '1'
                    attributes:
                        nickname: Allie
                        type: individual
                        email_md5: dbcb7f47db3e119a6a2ee8090e328bf4
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/user/1'
        EventWithSignups:
            summary: event object with a related signup record
            value:
                data:
                    type: event
                    id: '1'
                    attributes:
                        title: Interfaculty Badminton Competition
                        time_begin: '2020-06-30T06:00:00Z'
                        time_end: '2020-06-30T10:00:00Z'
                        location:
                            type: physical
                            zip_code: '117561'
                            address: 2 Sports Drive 1
                            building: University Sports Centre
                        type: sports
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        organizer:
                            data:
                                type: user
                                id: '1'
                            links:
                                related: 'http://127.0.0.1:8080/api/user/1'
                        event_signups:
                        -
                            data:
                                type: event_signup
                                id: '1'
                    links:
                        self: 'http://127.0.0.1:8080/api/event/1'
                included:
                -
                    # content of this should be the exactly same content as user.get(id)
                    type: user
                    id: '1'
                    attributes:
                        nickname: Allie
                        type: individual
                        email_md5: dbcb7f47db3e119a6a2ee8090e328bf4
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/user/1'
                -
                    # content of this should be the exactly same content as user.get(id)
                    type: user
                    id: '2'
                    attributes:
                        nickname: Demo Participant
                        type: individual
                        email_md5: dbcb7f47db3e119a6a2ee8090e328bf5
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/user/2'
                -
                    type: event_signup
                    id: '1'
                    attributes:
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        # for event object, event signup record only side-loads participants information
                        user:
                            data:
                                type: user
                                id: '2'
        EventNew:
            summary: new event object with partial attributes
            value:
                data:
                    type: event
                    attributes:
                        title: Interfaculty Badminton Competition
                        time_begin: '2020-06-30T06:00:00Z'
                        time_end: '2020-06-30T10:00:00Z'
                        location:
                            type: physical
                            zip_code: '117561'
                            address: 2 Sports Drive 1
                            building: University Sports Centre
                        type: sports
                    relationships:
                        images:
                            data:
                            -   
                                type: file
                                id: '1'
                            -
                                type: file
                                id: '2'
        EventSignupNew:
            summary: object used to create a new signup record
            value:
                data:
                    type: event_signup
                    relationships:
                        event:
                            data:
                                type: event
                                id: '1'
        EventSignupUpdateParticipant:
            summary: event_signup update request by the participant (review)
            value:
                data:
                    id: '1'
                    type: event_signup
                    attributes:
                        status: reviewed
                        review_score: 5
                        review_text: This event is brilliant and I enjoyed participating it!
        EventSignupUpdateOrganizer:
            summary: event_signup update request by the organizer (marking attendance)
            value:
                data:
                    id: '1'
                    type: event_signup
                    attributes:
                        status: attended
        EventSignupAllAttributes:
            summary: a complete EventSignup object with all attributes
            value:
                data:
                    id: 1
                    type: event_signup
                    attributes:
                        status: created
                        created_at: '2020-06-19T12:54:00Z'
                        updated_at: '2020-06-19T12:54:00Z'
                    relationships:
                        event:
                            data:
                                type: event
                                id: '1'
                        user:
                            data:
                                type: event
                                id: '1'
                included:
                -
                    type: user
                    id: '1'
                    attributes:
                        nickname: Allie
                        type: individual
                        email_md5: dbcb7f47db3e119a6a2ee8090e328bf4
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/user/1'
                -
                    # note: relationships will not be listed here since Event.Organizer will not be loaded
                    type: event
                    id: '1'
                    attributes:
                        title: Interfaculty Badminton Competition
                        time_begin: '2020-06-30T06:00:00Z'
                        time_end: '2020-06-30T10:00:00Z'
                        location:
                            type: physical
                            zip_code: '117561'
                            address: 2 Sports Drive 1
                            building: University Sports Centre
                        type: sports
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    links:
                        self: 'http://127.0.0.1:8080/api/event/1'
        FileNew:
            summary: New file object
            value:
                data:
                    type: file
                    attributes:
                        filename: somephoto.jpg
                        type: images
        FileNewResponse:
            summary: response of new file object, with uploading parameters provided
            value:
                data:
                    type: file
                    id: '1'
                    attributes:
                        filename: 574441ef-357c-4e82-b5fb-f597b3aeb6ff.jpg
                        type: images
                        status: created
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        uploader:
                            data:
                                type: user
                                id: 1
                    meta:
                        endpoint: 'https://schrodingerbox.blob.core.windows.net/images/574441ef-357c-4e82-b5fb-f597b3aeb6ff.jpg'
                        qp: 'se=2020-07-06T09%3A03%3A52Z&sig=O77eDHQU79RUANWxoO%2Fp8G7e3ZMBrhUN9XXXXXXXXXX2Bc%3D&sp=c&spr=https&sr=b&sv=2019-02-02'
                        qp_expires_at: '2020-07-06T09:03:22Z'
        FileUpdate:
            summary: File object to update status to 'active'
            value:
                data:
                    type: file
                    id: '1'
                    attributes:
                        status: active
        FileUpdateResponse:
            summary: File object response after status set to active
            value:
                data:
                    type: file
                    id: '1'
                    attributes:
                        filename: 574441ef-357c-4e82-b5fb-f597b3aeb6ff.jpg
                        type: images
                        status: active
                        created_at: '2020-06-08T09:04:45Z'
                        updated_at: '2020-06-08T09:04:45Z'
                    relationships:
                        uploader:
                            data:
                                type: user
                                id: 1
        FilesGet:
            summary: Meta object with SAS for downloading resources
            value:
                meta:
                    endpoint: 'https://schrodingerbox.blob.core.windows.net/images/'
                    qp: 'se=2020-07-20T07%3A48%3A41Z&sig=u5nnSXQvtpLTIZZoMiGXXXXXXXXXXX%2BxCPE%3D&sp=r&spr=https&sr=c&sv=2019-02-02'
                    qp_expires_at: '2020-07-06T09:03:22Z'
        SMSBindNewCode:
            summary: Request for generating a new verification code
            value:
                meta: {}
        SMSBindVerifyCode:
            summary: Check verification code and bind number if correct
            value:
                meta:
                    verification_code: '123456'
        Error400:
            summary: 400 Bad Request
            value:
                errors:
                -
                    status: '400'
                    code: error.bad_request
                    title: errors occurred when processing request
        Error401:
            summary: 401 Unauthorized
            value:
                errors:
                -
                    status: '401'
                    code: error.unauthorized
                    title: authentication token is missing or invalid
        # note that 401 is different from 403
        # 401 means token is not sent in HTTP header or token sent is invalid
        # 403 means token is valid but does not entitle the holder to perform such action
        Error403:
            summary: 403 Forbidden
            value:
                errors:
                -
                    status: '403'
                    code: error.forbidden
                    title: you are not authorized to access this resource in this way
        Error404:
            summary: 404 Not Found
            value:
                errors:
                -
                    status: '404'
                    code: error.not_found
                    title: requested or related resources cannot be found
        Error500:
            summary: 500 Internal Server Error
            value:
                errors:
                -
                    status: '500'
                    code: error.internal
                    title: something unexpected happened at the server side
    securitySchemes:
        TokenID:
            type: apiKey
            description: ID of the Token object
            name: X-Token-ID
            in: header
        TokenSecret:
            type: apiKey
            description: Secret of the Token object
            name: X-Token-Secret
            in: header